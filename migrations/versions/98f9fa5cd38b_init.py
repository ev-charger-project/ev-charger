"""init

Revision ID: 98f9fa5cd38b
Revises:
Create Date: 2025-05-23 00:14:06.234239

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "98f9fa5cd38b"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "amenities",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "amenities_types", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("image_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "amenities_types", "deleted_at", name="uix_amenities_types"
        ),
    )
    op.create_index(op.f("ix_amenities_id"), "amenities", ["id"], unique=False)
    op.create_table(
        "city",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "country",
            sa.Enum(
                "afghanistan",
                "aland_islands",
                "albania",
                "algeria",
                "american_samoa",
                "andorra",
                "angola",
                "anguilla",
                "antarctica",
                "antigua_and_barbuda",
                "argentina",
                "armenia",
                "aruba",
                "australia",
                "austria",
                "azerbaijan",
                "bahamas",
                "bahrain",
                "bangladesh",
                "barbados",
                "belarus",
                "belgium",
                "belize",
                "benin",
                "bermuda",
                "bhutan",
                "bolivia_plurinational_state_of",
                "bonaire_sint_eustatius_and_saba",
                "bosnia_and_herzegovina",
                "botswana",
                "bouvet_island",
                "brazil",
                "british_indian_ocean_territory",
                "brunei_darussalam",
                "bulgaria",
                "burkina_faso",
                "burundi",
                "cambodia",
                "cameroon",
                "canada",
                "cape_verde",
                "cayman_islands",
                "central_african_republic",
                "chad",
                "chile",
                "china",
                "christmas_island",
                "cocos_keeling_islands",
                "colombia",
                "comoros",
                "congo",
                "congo_the_democratic_republic_of_the",
                "cook_islands",
                "costa_rica",
                "cote_divoire",
                "croatia",
                "cuba",
                "curacao",
                "cyprus",
                "czech_republic",
                "denmark",
                "djibouti",
                "dominica",
                "dominican_republic",
                "ecuador",
                "egypt",
                "el_salvador",
                "equatorial_guinea",
                "eritrea",
                "estonia",
                "ethiopia",
                "falkland_islands_malvinas",
                "faroe_islands",
                "fiji",
                "finland",
                "france",
                "french_guiana",
                "french_polynesia",
                "french_southern_territories",
                "gabon",
                "gambia",
                "georgia",
                "germany",
                "ghana",
                "gibraltar",
                "greece",
                "greenland",
                "grenada",
                "guadeloupe",
                "guam",
                "guatemala",
                "guernsey",
                "guinea",
                "guinea_bissau",
                "guyana",
                "haiti",
                "heard_island_and_mcdonald_islands",
                "holy_see_vatican_city_state",
                "honduras",
                "hong_kong",
                "hungary",
                "iceland",
                "india",
                "indonesia",
                "iran_islamic_republic_of",
                "iraq",
                "ireland",
                "isle_of_man",
                "israel",
                "italy",
                "jamaica",
                "japan",
                "jersey",
                "jordan",
                "kazakhstan",
                "kenya",
                "kiribati",
                "korea_democratic_peoples_republic_of",
                "korea_republic_of",
                "kosovo",
                "kuwait",
                "kyrgyzstan",
                "lao_peoples_democratic_republic",
                "latvia",
                "lebanon",
                "lesotho",
                "liberia",
                "libya",
                "liechtenstein",
                "lithuania",
                "luxembourg",
                "macao",
                "macedonia_the_former_yugoslav_republic_of",
                "madagascar",
                "malawi",
                "malaysia",
                "maldives",
                "mali",
                "malta",
                "marshall_islands",
                "martinique",
                "mauritania",
                "mauritius",
                "mayotte",
                "mexico",
                "micronesia_federated_states_of",
                "moldova_republic_of",
                "monaco",
                "mongolia",
                "montenegro",
                "montserrat",
                "morocco",
                "mozambique",
                "myanmar",
                "namibia",
                "nauru",
                "nepal",
                "netherlands",
                "new_caledonia",
                "new_zealand",
                "nicaragua",
                "niger",
                "nigeria",
                "niue",
                "norfolk_island",
                "northern_cyprus",
                "northern_mariana_islands",
                "norway",
                "oman",
                "pakistan",
                "palau",
                "palestine_state_of",
                "panama",
                "papua_new_guinea",
                "paraguay",
                "peru",
                "philippines",
                "pitcairn_islands",
                "poland",
                "portugal",
                "puerto_rico",
                "qatar",
                "reunion",
                "romania",
                "russian_federation",
                "rwanda",
                "western_sahara",
                "saint_barthelemy",
                "saint_helena_ascension_and_tristan_da_cunha",
                "saint_kitts_and_nevis",
                "saint_lucia",
                "saint_martin_french_part",
                "saint_pierre_and_miquelon",
                "saint_vincent_and_the_grenadines",
                "samoa",
                "san_marino",
                "sao_tome_and_principe",
                "saudi_arabia",
                "senegal",
                "serbia",
                "seychelles",
                "sierra_leone",
                "singapore",
                "sint_maarten_dutch_part",
                "slovakia",
                "slovenia",
                "solomon_islands",
                "somalia",
                "somaliland",
                "south_africa",
                "south_georgia_and_the_south_sandwich_islands",
                "south_ossetia",
                "south_sudan",
                "spain",
                "sri_lanka",
                "sudan",
                "suriname",
                "svalbard_and_jan_mayen",
                "swaziland",
                "sweden",
                "switzerland",
                "syrian_arab_republic",
                "taiwan_province_of_china",
                "tajikistan",
                "tanzania_united_republic_of",
                "thailand",
                "timor_leste",
                "togo",
                "tokelau",
                "tonga",
                "transnistria",
                "trinidad_and_tobago",
                "tunisia",
                "turkey",
                "turkmenistan",
                "turks_and_caicos_islands",
                "tuvalu",
                "uganda",
                "ukraine",
                "united_arab_emirates",
                "united_kingdom",
                "united_states",
                "united_states_minor_outlying_islands",
                "uruguay",
                "uzbekistan",
                "vanuatu",
                "venezuela_bolivarian_republic_of",
                "vietnam",
                "virgin_islands_british",
                "virgin_islands_us",
                "wallis_and_futuna",
                "yemen",
                "zambia",
                "zimbabwe",
                "missing",
                name="country",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_city_id"), "city", ["id"], unique=False)
    op.create_table(
        "location",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "external_id", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "location_name",
            sqlmodel.sql.sqltypes.AutoString(length=100),
            nullable=False,
        ),
        sa.Column(
            "street", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "house_number", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True
        ),
        sa.Column(
            "district", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column(
            "county", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column(
            "country",
            sa.Enum(
                "afghanistan",
                "aland_islands",
                "albania",
                "algeria",
                "american_samoa",
                "andorra",
                "angola",
                "anguilla",
                "antarctica",
                "antigua_and_barbuda",
                "argentina",
                "armenia",
                "aruba",
                "australia",
                "austria",
                "azerbaijan",
                "bahamas",
                "bahrain",
                "bangladesh",
                "barbados",
                "belarus",
                "belgium",
                "belize",
                "benin",
                "bermuda",
                "bhutan",
                "bolivia_plurinational_state_of",
                "bonaire_sint_eustatius_and_saba",
                "bosnia_and_herzegovina",
                "botswana",
                "bouvet_island",
                "brazil",
                "british_indian_ocean_territory",
                "brunei_darussalam",
                "bulgaria",
                "burkina_faso",
                "burundi",
                "cambodia",
                "cameroon",
                "canada",
                "cape_verde",
                "cayman_islands",
                "central_african_republic",
                "chad",
                "chile",
                "china",
                "christmas_island",
                "cocos_keeling_islands",
                "colombia",
                "comoros",
                "congo",
                "congo_the_democratic_republic_of_the",
                "cook_islands",
                "costa_rica",
                "cote_divoire",
                "croatia",
                "cuba",
                "curacao",
                "cyprus",
                "czech_republic",
                "denmark",
                "djibouti",
                "dominica",
                "dominican_republic",
                "ecuador",
                "egypt",
                "el_salvador",
                "equatorial_guinea",
                "eritrea",
                "estonia",
                "ethiopia",
                "falkland_islands_malvinas",
                "faroe_islands",
                "fiji",
                "finland",
                "france",
                "french_guiana",
                "french_polynesia",
                "french_southern_territories",
                "gabon",
                "gambia",
                "georgia",
                "germany",
                "ghana",
                "gibraltar",
                "greece",
                "greenland",
                "grenada",
                "guadeloupe",
                "guam",
                "guatemala",
                "guernsey",
                "guinea",
                "guinea_bissau",
                "guyana",
                "haiti",
                "heard_island_and_mcdonald_islands",
                "holy_see_vatican_city_state",
                "honduras",
                "hong_kong",
                "hungary",
                "iceland",
                "india",
                "indonesia",
                "iran_islamic_republic_of",
                "iraq",
                "ireland",
                "isle_of_man",
                "israel",
                "italy",
                "jamaica",
                "japan",
                "jersey",
                "jordan",
                "kazakhstan",
                "kenya",
                "kiribati",
                "korea_democratic_peoples_republic_of",
                "korea_republic_of",
                "kosovo",
                "kuwait",
                "kyrgyzstan",
                "lao_peoples_democratic_republic",
                "latvia",
                "lebanon",
                "lesotho",
                "liberia",
                "libya",
                "liechtenstein",
                "lithuania",
                "luxembourg",
                "macao",
                "macedonia_the_former_yugoslav_republic_of",
                "madagascar",
                "malawi",
                "malaysia",
                "maldives",
                "mali",
                "malta",
                "marshall_islands",
                "martinique",
                "mauritania",
                "mauritius",
                "mayotte",
                "mexico",
                "micronesia_federated_states_of",
                "moldova_republic_of",
                "monaco",
                "mongolia",
                "montenegro",
                "montserrat",
                "morocco",
                "mozambique",
                "myanmar",
                "namibia",
                "nauru",
                "nepal",
                "netherlands",
                "new_caledonia",
                "new_zealand",
                "nicaragua",
                "niger",
                "nigeria",
                "niue",
                "norfolk_island",
                "northern_cyprus",
                "northern_mariana_islands",
                "norway",
                "oman",
                "pakistan",
                "palau",
                "palestine_state_of",
                "panama",
                "papua_new_guinea",
                "paraguay",
                "peru",
                "philippines",
                "pitcairn_islands",
                "poland",
                "portugal",
                "puerto_rico",
                "qatar",
                "reunion",
                "romania",
                "russian_federation",
                "rwanda",
                "western_sahara",
                "saint_barthelemy",
                "saint_helena_ascension_and_tristan_da_cunha",
                "saint_kitts_and_nevis",
                "saint_lucia",
                "saint_martin_french_part",
                "saint_pierre_and_miquelon",
                "saint_vincent_and_the_grenadines",
                "samoa",
                "san_marino",
                "sao_tome_and_principe",
                "saudi_arabia",
                "senegal",
                "serbia",
                "seychelles",
                "sierra_leone",
                "singapore",
                "sint_maarten_dutch_part",
                "slovakia",
                "slovenia",
                "solomon_islands",
                "somalia",
                "somaliland",
                "south_africa",
                "south_georgia_and_the_south_sandwich_islands",
                "south_ossetia",
                "south_sudan",
                "spain",
                "sri_lanka",
                "sudan",
                "suriname",
                "svalbard_and_jan_mayen",
                "swaziland",
                "sweden",
                "switzerland",
                "syrian_arab_republic",
                "taiwan_province_of_china",
                "tajikistan",
                "tanzania_united_republic_of",
                "thailand",
                "timor_leste",
                "togo",
                "tokelau",
                "tonga",
                "transnistria",
                "trinidad_and_tobago",
                "tunisia",
                "turkey",
                "turkmenistan",
                "turks_and_caicos_islands",
                "tuvalu",
                "uganda",
                "ukraine",
                "united_arab_emirates",
                "united_kingdom",
                "united_states",
                "united_states_minor_outlying_islands",
                "uruguay",
                "uzbekistan",
                "vanuatu",
                "venezuela_bolivarian_republic_of",
                "vietnam",
                "virgin_islands_british",
                "virgin_islands_us",
                "wallis_and_futuna",
                "yemen",
                "zambia",
                "zimbabwe",
                "missing",
                name="country",
            ),
            nullable=False,
        ),
        sa.Column(
            "postal_code", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True
        ),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("phone_number", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "website_url", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True
        ),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True
        ),
        sa.Column(
            "image_url", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True
        ),
        sa.Column(
            "pricing", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column(
            "parking_level", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True
        ),
        sa.Column("total_charging_ports", sa.Integer(), nullable=True),
        sa.Column(
            "access",
            sa.Enum("public", "restricted", name="locationaccess"),
            nullable=True,
        ),
        sa.Column("payment_methods", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_location_id"), "location", ["id"], unique=False)
    op.create_table(
        "poweroutput",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("output_value", sa.Float(), nullable=False),
        sa.Column("charging_speed", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("voltage", sa.Integer(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_poweroutput_id"), "poweroutput", ["id"], unique=False)
    op.create_table(
        "powerplugtype",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("power_model", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("plug_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("plug_image_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("additional_note", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "power_plug_region", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_powerplugtype_id"), "powerplugtype", ["id"], unique=False)
    op.create_table(
        "district",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("city_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["city.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_district_id"), "district", ["id"], unique=False)
    op.create_table(
        "evcharger",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("location_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("station_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "cpo_id", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "cpo_evse_emi3_id",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
        sa.Column(
            "availability",
            sa.Enum(
                "AVAILABLE",
                "UNAVAILABLE",
                "OCCUPIED",
                "RESERVED",
                "OUT_OF_SERVICE",
                "OTHER",
                name="availabilityenum",
            ),
            nullable=False,
        ),
        sa.Column("last_updated", sa.Date(), nullable=False),
        sa.Column("installation_date", sa.Date(), nullable=True),
        sa.Column("last_maintenance_date", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_evcharger_id"), "evcharger", ["id"], unique=False)
    op.create_table(
        "locationamenities",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("location_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("amenities_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["amenities_id"],
            ["amenities.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "location_id",
            "amenities_id",
            "deleted_at",
            name="uix_location_id_amenities_id",
        ),
    )
    op.create_index(
        op.f("ix_locationamenities_id"), "locationamenities", ["id"], unique=False
    )
    op.create_table(
        "locationsearchhistory",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("location_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "location_id",
            "user_id",
            "deleted_at",
            name="uix_location_id_user_id_search_history",
        ),
    )
    op.create_index(
        op.f("ix_locationsearchhistory_id"),
        "locationsearchhistory",
        ["id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locationsearchhistory_user_id"),
        "locationsearchhistory",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "userfavorite",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("location_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "location_id", "user_id", "deleted_at", name="uix_location_id_user_id"
        ),
    )
    op.create_index(op.f("ix_userfavorite_id"), "userfavorite", ["id"], unique=False)
    op.create_index(
        op.f("ix_userfavorite_user_id"), "userfavorite", ["user_id"], unique=False
    )
    op.create_table(
        "workingday",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("day", sa.Integer(), nullable=False),
        sa.Column("open_time", sa.Time(), nullable=False),
        sa.Column("close_time", sa.Time(), nullable=False),
        sa.Column("location_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_workingday_id"), "workingday", ["id"], unique=False)
    op.create_table(
        "evchargerport",
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("deleted_by", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("power_plug_type_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("power_output_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("ev_charger_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ev_charger_id"],
            ["evcharger.id"],
        ),
        sa.ForeignKeyConstraint(
            ["power_output_id"],
            ["poweroutput.id"],
        ),
        sa.ForeignKeyConstraint(
            ["power_plug_type_id"],
            ["powerplugtype.id"],
        ),
        sa.PrimaryKeyConstraint(
            "id", "power_plug_type_id", "power_output_id", "ev_charger_id"
        ),
    )
    op.create_index(
        op.f("ix_evchargerport_ev_charger_id"),
        "evchargerport",
        ["ev_charger_id"],
        unique=False,
    )
    op.create_index(op.f("ix_evchargerport_id"), "evchargerport", ["id"], unique=False)
    op.create_index(
        op.f("ix_evchargerport_power_output_id"),
        "evchargerport",
        ["power_output_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evchargerport_power_plug_type_id"),
        "evchargerport",
        ["power_plug_type_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_evchargerport_power_plug_type_id"), table_name="evchargerport"
    )
    op.drop_index(op.f("ix_evchargerport_power_output_id"), table_name="evchargerport")
    op.drop_index(op.f("ix_evchargerport_id"), table_name="evchargerport")
    op.drop_index(op.f("ix_evchargerport_ev_charger_id"), table_name="evchargerport")
    op.drop_table("evchargerport")
    op.drop_index(op.f("ix_workingday_id"), table_name="workingday")
    op.drop_table("workingday")
    op.drop_index(op.f("ix_userfavorite_user_id"), table_name="userfavorite")
    op.drop_index(op.f("ix_userfavorite_id"), table_name="userfavorite")
    op.drop_table("userfavorite")
    op.drop_index(
        op.f("ix_locationsearchhistory_user_id"), table_name="locationsearchhistory"
    )
    op.drop_index(
        op.f("ix_locationsearchhistory_id"), table_name="locationsearchhistory"
    )
    op.drop_table("locationsearchhistory")
    op.drop_index(op.f("ix_locationamenities_id"), table_name="locationamenities")
    op.drop_table("locationamenities")
    op.drop_index(op.f("ix_evcharger_id"), table_name="evcharger")
    op.drop_table("evcharger")
    op.drop_index(op.f("ix_district_id"), table_name="district")
    op.drop_table("district")
    op.drop_index(op.f("ix_powerplugtype_id"), table_name="powerplugtype")
    op.drop_table("powerplugtype")
    op.drop_index(op.f("ix_poweroutput_id"), table_name="poweroutput")
    op.drop_table("poweroutput")
    op.drop_index(op.f("ix_location_id"), table_name="location")
    op.drop_table("location")
    op.drop_index(op.f("ix_city_id"), table_name="city")
    op.drop_table("city")
    op.drop_index(op.f("ix_amenities_id"), table_name="amenities")
    op.drop_table("amenities")
    # ### end Alembic commands ###
